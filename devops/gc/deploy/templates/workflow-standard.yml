#  Copyright 2025 Google LLC
#  Copyright 2025 EPAM
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

{{ include "workflow.getAutoscaling" . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Values.conf.appName | quote }}
    type: ingestion
    source: java
  name: {{ .Values.conf.appName | quote }}
  namespace: {{ .Release.Namespace | quote }}
spec:
  selector:
    matchLabels:
      provision-type: "standard"
      app: {{ .Values.conf.appName | quote }}
  replicas: {{ include "workflow.replicasStandard" . }}
  template:
    metadata:
      labels:
        provision-type: "standard"
        app: {{ .Values.conf.appName | quote }}
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
        sidecar.istio.io/proxyCPU: {{ .Values.istio.proxyCPU | quote }}
        sidecar.istio.io/proxyMemory: {{ .Values.istio.proxyMemory | quote }}
        sidecar.istio.io/proxyCPULimit: {{ .Values.istio.proxyCPULimit | quote }}
        sidecar.istio.io/proxyMemoryLimit: {{ .Values.istio.proxyMemoryLimit | quote }}
    spec:
      {{- if (ne .Values.global.autoscalingMode "none") }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            {{- range $key, $valuesList := .Values.data.affinityLabelsStandard }}
            - matchExpressions:
              - key: {{ $key }}
                operator: In
                values:
                {{- toYaml $valuesList | nindent 18 }}
            {{- end }}
      {{- end }}
      tolerations:
      - key: "kubernetes.io/arch"
        operator: "Equal"
        value: "arm64"
        effect: "NoSchedule"
      containers:
      - name: {{ .Values.conf.appName | quote }}
        image: {{ .Values.data.image | quote }}
        imagePullPolicy: {{ .Values.data.imagePullPolicy | quote }}
        envFrom:
        - configMapRef:
            name: {{ .Values.conf.configmap | quote }}
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
        ports:
        - containerPort: 8080
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /health/liveness
            port: 8081
          initialDelaySeconds: 120
          periodSeconds: 10
        readinessProbe:
          failureThreshold: 2
          httpGet:
            path: /health/readiness
            port: 8081
          periodSeconds: 10
        resources:
          requests:
            cpu: {{ .Values.data.requestsCpu | quote }}
            memory: {{ .Values.data.requestsMemory | quote }}
          {{- if .Values.global.limitsEnabled }}
          limits:
            cpu: {{ .Values.data.limitsCpu | quote }}
            memory: {{ .Values.data.limitsMemory | quote }}
          {{- end }}
      serviceAccountName: {{ .Values.data.serviceAccountName | quote }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 0
