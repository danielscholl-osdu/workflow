# Copyright Â© 2021 Amazon Web Services
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html

# https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html
version: 0.2

env:
  secrets-manager:
    DOCKER_USERNAME: /osdu/devops/docker_credentials:username
    DOCKER_PASSWORD: /osdu/devops/docker_credentials:password
    SONAR_USERNAME: /osdu/devops/sonar_credentials:username
    SONAR_PASSWORD: /osdu/devops/sonar_credentials:password

  parameter-store:
    SONAR_URL: /osdu/devops/sonar_url

phases:
  install:
    runtime-versions:
      java: corretto17
    commands:
       # fix error noted here: https://github.com/yarnpkg/yarn/issues/7866
      - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
      - apt-get update -y
      - apt-get install -y maven
      - java -version
      - mvn -version
      - echo $JAVA_HOME #WHY
      - mkdir -p /root/.m2
      - cp ./.mvn/community-maven.settings.xml /root/.m2/settings.xml

      - git clone https://github.com/awslabs/git-secrets.git
      - cd git-secrets && make install && cd ..
      - git secrets --install && git secrets --register-aws
  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_REGISTRY}
      - echo "Logging into Docker Hub..."
      - docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
  build:
    commands:
      - export OUTPUT_DIR="dist"
      - export ECR_TAG=`echo build.${BRANCH_NAME}.${CODEBUILD_BUILD_NUMBER}.${COMMIT_ID} | cut -c 1-120`
      - export ECR_IMAGE=${ECR_REGISTRY}:${ECR_TAG}
      - export ECR_IMAGE_BRANCH_LATEST=${ECR_REGISTRY}:${BRANCH_NAME}
      - export INTEGRATION_TEST_OUTPUT=${OUTPUT_DIR}/testing/integration
      - export INTEGRATION_TEST_OUTPUT_BIN=${INTEGRATION_TEST_OUTPUT}/bin
      - mkdir -p ${OUTPUT_DIR}/bin
      - mkdir -p ${OUTPUT_DIR}/testing && mkdir -p ${INTEGRATION_TEST_OUTPUT}  && mkdir -p ${INTEGRATION_TEST_OUTPUT}/bin
      - echo "Placeholder" >> ${OUTPUT_DIR}/build-info.json # touched so that the output directory has some content incase the build fails so that testing reports are uploaded
      - pom_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
      - export VERSION=${pom_version%-*}
      - printenv

      - GIT_SECRETS_SCAN_RESULT=$(git secrets --scan 2> ${OUTPUT_DIR}/git_secrets.out.txt && echo OK || echo FAILED)
      - if [ "$GIT_SECRETS_SCAN_RESULT" = "FAILED" ]; then echo "Secrets detected!" && exit 1; fi

      - echo "Building primary service assemblies..."
      - mvn -B test install -pl .,workflow-core,provider/workflow-aws -Ddeployment.environment=prod
      - mvn sonar:sonar -pl .,provider/workflow-aws -Dsonar.projectKey=org.opengroup.osdu:os-ingestion-workflow -Dsonar.login=${SONAR_USERNAME} -Dsonar.password=${SONAR_PASSWORD} -Dsonar.branch.name=${BRANCH_NAME} -Dsonar.projectName=os-ingestion-workflow  -Dsonar.host.url=${SONAR_URL}

      - echo "Building integration testing assemblies and gathering artifacts..."
      - ./testing/workflow-test-aws/build-aws/prepare-dist.sh

      - echo "Logging into Docker Hub..."
      - docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}

      - echo "Build and push docker image..."
      - docker buildx create --driver docker-container --use
      - docker buildx inspect --bootstrap
      - docker buildx build --platform linux/arm64/v8,linux/amd64 --pull --push -f provider/workflow-aws/build-aws/Dockerfile -t ${ECR_IMAGE} -t ${ECR_IMAGE_BRANCH_LATEST} .

      - echo "Generate build-info.json"
      - |
        python provider/workflow-aws/build-aws/build-info.py --branch ${BRANCH_NAME} --commitId ${COMMIT_ID} \
        --commitMessage "\"${COMMIT_MESSAGE}\"" --commitAuthor "\"${COMMIT_AUTHOR}\"" --commitDate "\"${COMMIT_DATE}\"" \
        --buildid ${CODEBUILD_BUILD_ID} --buildnumber ${CODEBUILD_BUILD_NUMBER} --reponame ${REPO_NAME} --outdir ${OUTPUT_DIR} \
        --artifact ${ECR_IMAGE}

reports:
  SurefireReports: # CodeBuild will create a report group called "SurefireReports".
    files: #Store all of the files
      - "workflow-core/target/surefire-reports/**/*"
      - "provider/workflow-aws/target/surefire-reports/**/*"
    base-directory: "." # Location of the reports
artifacts:
  files:
    - "**/*"
  base-directory: "dist"
  name: ${BRANCH_NAME}/${PACKAGE_NAME}.zip
cache:
  paths:
    - "/root/.m2/**/*"
